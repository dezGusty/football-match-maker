// <auto-generated />
using System;
using FootballAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballAPI.Migrations
{
    [DbContext(typeof(FootballDbContext))]
    [Migration("20250822081753_updatedDatabase3")]
    partial class updatedDatabase3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FootballAPI.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("FootballAPI.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganiserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("OrganiserId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FootballAPI.Models.MatchTeams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Goals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchTeams");
                });

            modelBuilder.Entity("FootballAPI.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Errors")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfileImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Ion",
                            LastName = "Popescu",
                            Rating = 8.5f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Marius",
                            LastName = "Ionescu",
                            Rating = 7.8f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Alex",
                            LastName = "Georgescu",
                            Rating = 7.2f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Razvan",
                            LastName = "Moldovan",
                            Rating = 8.1f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Cristian",
                            LastName = "Stancu",
                            Rating = 6.9f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 7
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Andrei",
                            LastName = "Vasilescu",
                            Rating = 7.7f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 8
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Florin",
                            LastName = "Dumitru",
                            Rating = 8.3f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 9
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Gabriel",
                            LastName = "Ciobanu",
                            Rating = 7.4f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 10
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Lucian",
                            LastName = "Matei",
                            Rating = 6.8f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 11
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Daniel",
                            LastName = "Radu",
                            Rating = 7.9f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 12
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Mihai",
                            LastName = "Popa",
                            Rating = 8f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 13
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Errors = 2,
                            FirstName = "Stefan",
                            LastName = "Nicolae",
                            Rating = 7.6f,
                            Speed = 2,
                            Stamina = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 14
                        });
                });

            modelBuilder.Entity("FootballAPI.Models.PlayerOrganiser", b =>
                {
                    b.Property<int>("OrganiserId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("OrganiserId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerOrganisers");
                });

            modelBuilder.Entity("FootballAPI.Models.ResetPasswordToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetPasswordTokens");
                });

            modelBuilder.Entity("FootballAPI.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FC Brasov"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Steaua Bucuresti"
                        });
                });

            modelBuilder.Entity("FootballAPI.Models.TeamPlayers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchTeamId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TeamPlayers");
                });

            modelBuilder.Entity("FootballAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ion.popescu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "IonPopescu"
                        },
                        new
                        {
                            Id = 2,
                            Email = "marius.ionescu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "MariusIonescu"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@gmail.com",
                            Password = "default123",
                            Role = 0,
                            Username = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Email = "organiser@gmail.com",
                            Password = "default123",
                            Role = 1,
                            Username = "Organiser"
                        },
                        new
                        {
                            Id = 5,
                            Email = "alex.georgescu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "AlexGeorgescu"
                        },
                        new
                        {
                            Id = 6,
                            Email = "razvan.moldovan@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "RazvanMoldovan"
                        },
                        new
                        {
                            Id = 7,
                            Email = "cristian.stancu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "CristianStancu"
                        },
                        new
                        {
                            Id = 8,
                            Email = "andrei.vasilescu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "AndreiVasilescu"
                        },
                        new
                        {
                            Id = 9,
                            Email = "florin.dumitru@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "FlorinDumitru"
                        },
                        new
                        {
                            Id = 10,
                            Email = "gabriel.ciobanu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "GabrielCiobanu"
                        },
                        new
                        {
                            Id = 11,
                            Email = "lucian.matei@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "LucianMatei"
                        },
                        new
                        {
                            Id = 12,
                            Email = "daniel.radu@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "DanielRadu"
                        },
                        new
                        {
                            Id = 13,
                            Email = "mihai.popa@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "MihaiPopa"
                        },
                        new
                        {
                            Id = 14,
                            Email = "stefan.nicolae@gmail.com",
                            Password = "default123",
                            Role = 2,
                            Username = "StefanNicolae"
                        });
                });

            modelBuilder.Entity("FootballAPI.Models.FriendRequest", b =>
                {
                    b.HasOne("FootballAPI.Models.User", "Receiver")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballAPI.Models.User", "Sender")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FootballAPI.Models.Match", b =>
                {
                    b.HasOne("FootballAPI.Models.User", "Organiser")
                        .WithMany("OrganisedMatches")
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("FootballAPI.Models.MatchTeams", b =>
                {
                    b.HasOne("FootballAPI.Models.Match", "Match")
                        .WithMany("MatchTeams")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballAPI.Models.Team", "Team")
                        .WithMany("MatchTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballAPI.Models.Player", b =>
                {
                    b.HasOne("FootballAPI.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("FootballAPI.Models.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballAPI.Models.PlayerOrganiser", b =>
                {
                    b.HasOne("FootballAPI.Models.User", "Organiser")
                        .WithMany("OrganisedPlayers")
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FootballAPI.Models.Player", "Player")
                        .WithMany("PlayerOrganisers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organiser");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballAPI.Models.ResetPasswordToken", b =>
                {
                    b.HasOne("FootballAPI.Models.User", "User")
                        .WithMany("ResetPasswordTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballAPI.Models.TeamPlayers", b =>
                {
                    b.HasOne("FootballAPI.Models.MatchTeams", "MatchTeam")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("MatchTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballAPI.Models.Player", "Player")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballAPI.Models.Match", b =>
                {
                    b.Navigation("MatchTeams");
                });

            modelBuilder.Entity("FootballAPI.Models.MatchTeams", b =>
                {
                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("FootballAPI.Models.Player", b =>
                {
                    b.Navigation("PlayerOrganisers");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("FootballAPI.Models.Team", b =>
                {
                    b.Navigation("MatchTeams");
                });

            modelBuilder.Entity("FootballAPI.Models.User", b =>
                {
                    b.Navigation("OrganisedMatches");

                    b.Navigation("OrganisedPlayers");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("ResetPasswordTokens");

                    b.Navigation("SentFriendRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
